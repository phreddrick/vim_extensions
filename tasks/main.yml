---
- name: Include OS-dependent variables
  include_vars:
    file: "{{ item }}"
  with_first_found:
    - "{{ ansible_os_family }}{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: Make sure user {{ username }} exists
  user:
    name: "{{ username }}"
  register: user

- name: "Make vim dir"
  become_user: "{{ user.name }}"
  become: true
  file:
    path: "{{ user.home }}/.vim"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    mode: 0755

- name: "Setup .vim dir"
  copy:
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    src: "{{ item }}"
    dest: "{{ user.home }}/.vim/{{ item | basename }}"
    mode: "u=rw,g=r,o=r"
  with_fileglob:
    - "{{ role_path }}/files/vim/*"

- name: "Make vim subdirs dirs"
  become_user: "{{ user.name }}"
  become: true
  file:
    path: "{{ user.home }}/.vim/{{ item }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    mode: 0755
  with_items:
    - bundle
    - autoload

- name: "Install required packages(apt)"
  apt:
    name: "{{ vim_pkgs }}"
    state: present
    update_cache: true
  when: ansible_os_family == "Debian"

- name: "Install required packages(yum)"
  yum:
    name: "{{ vim_pkgs }}"
    state: present
    update_cache: true
  when: ansible_os_family == "RedHat"

- name: "Install pathogen vim plugin manager"
  get_url:
    url: https://tpo.pe/pathogen.vim
    dest: "{{ user.home }}/.vim/autoload/pathogen.vim"
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    mode: 0644
    validate_certs: false

- name: Copy vimrc file
  copy:
    owner: "{{ user.name }}"
    group: "{{ user.group }}"
    src: "{{ role_path }}/files/vimrc"
    dest: "{{ user.home }}/.vimrc"
    mode: "u=rw,g=r,o=r"


- name: Clone vim plugins
  become_user: "{{ user.name }}"
  become: true
  git:
    umask: "0022"
    repo: "{{ item.value }}"
    dest: "{{ user.home }}/.vim/bundle/{{ item.key }}"
    recursive: true
    accept_hostkey: true
    ssh_opts: "-c http.sslVerify=false"
    version: "master"
  with_dict: "{{ repos }}"

- name: "Check to see if we built vim already"
  stat:
    path: "/root/.vim_built"
  register: vim_built

- name: Clone vim repo
  block:
    - name: clone git repository
      git:
        umask: "0077"
        repo: "https://github.com/vim/vim.git"
        dest: "/root/vim"
        version: "master"
    - name: Enable python in vim build
      lineinfile:
        path: /root/vim/src/Makefile
        regexp: '^#CONF_OPT_PYTHON = --enable-pythoninterp$'
        line: 'CONF_OPT_PYTHON = --enable-pythoninterp'
    - name: Enable ruby in vim build
      lineinfile:
        path: /root/vim/src/Makefile
        regexp: '^#CONF_OPT_RUBY = --enable-rubyinterp=dynamic$'
        line: 'CONF_OPT_RUBY = --enable-rubyinterp=dynamic'
    - name: "Build vim"
      make:
        chdir: "/root/vim/src"
    - name: "Install vim"
      make:
        chdir: "/root/vim/src"
        target: "install"
    - name: "Cleanup vim build"
      file:
        path: "/root/vim"
        state: absent
    - name: "Mark vim as built"
      file:
        path: "/root/.vim_built"
        state: touch
  when: ansible_os_family == "RedHat" and
        ansible_distribution_major_version|int < 8 and
        not vim_built.stat.exists

- name: "Check to see if we built YouCompleteMe already"
  become_user: "{{ user.name }}"
  become: true
  stat:
    path: "{{ user.home }}/.vim/.YouCompleteMe_built"
  register: ycm_built

- name: "Compile YouCompleteMe"
  become_user: "{{ user.name }}"
  become: true
  block:
    - name: checkout YouCompleteMe
      git:
        umask: "0022"
        repo: "https://github.com/Valloric/YouCompleteMe.git"
        dest: "{{ user.home }}/.vim/bundle/YouCompleteMe"
        recursive: true
        accept_hostkey: true
        ssh_opts: "-c http.sslVerify=false"
        version: "{{ youcompletemeref }}"
    - name: Run install.py
      command: |
        ./install.py --clang-completer
      args:
        chdir: "{{ user.home }}/.vim/bundle/YouCompleteMe"
    - name: "Mark YouCompleteMe as built"
      file:
        path: "/home/{{ user.name }}/.vim/.YouCompleteMe_built"
        state: touch
  when: not ycm_built.stat.exists
